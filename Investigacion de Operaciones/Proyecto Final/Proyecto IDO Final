{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "import time \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import spatial\n",
    "from timeit import default_timer as timer\n",
    "from IPython.core.debugger import set_trace\n",
    "##from docplex.mp.model import Model\n",
    "#import docplex.mp.solution as Solucion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "coordenadas=pd.read_csv(r\"data.csv\") #Importamos el documento que contiene las coordendas de las ciudades\n",
    "coordenadas.columns=[\"ciudad\", \"c_x\", \"c_y\"] #nombres de las columnas del dataframe\n",
    "coordenadas = coordenadas.drop(\"ciudad\", axis=1)#quitar la columna del número de ciudad\n",
    "coordenadas = coordenadas.drop_duplicates() #quitamos las ciudades repetidas\n",
    "\n",
    "ciudades=[i for i in range(len(coordenadas))] #Se crean las 634 ciuades\n",
    "caminos =[(i,j) for i in ciudades for j in ciudades if i!=j] #todos las uniones posibles entre ciudades\n",
    "\n",
    "\n",
    "\n",
    "lo=coordenadas[\"c_x\"].tolist() #coordendas de longitud\n",
    "la=coordenadas[\"c_y\"].tolist() #coordenadas de latitud\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10,10)) #Grafiquemos las ciudades de Luxemburgo\n",
    "plt.scatter(la,lo,color='black')\n",
    "plt.xlabel(\"Longitud\")\n",
    "plt.ylabel(\"Latitud\")\n",
    "plt.title(\"Ciudades en Luxemburgo\")  \n",
    "plt.show()\n",
    "\n",
    "matriz_distancias = spatial.distance.cdist(coordenadas, coordenadas, metric='euclidean') #Creamos la matriz de distancias donde la entrada (i,j) es la distancia de la ciudad i a la ciudad j\n",
    "matriz_distancias =pd.DataFrame(matriz_distancias) #Convertimos en array en un DataFrame\n",
    "matriz_distancias = matriz_distancias.astype(int) #lo redondeamos\n",
    "\n",
    "\n",
    "##-------------------------------------------------------------\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Codigos originales Sofia \n",
    "def ciudades_sin_visitar(sin_visitar):\n",
    "    for i in sin_visitar:\n",
    "        if i == 1:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "\n",
    "def mejor_ruta(ciudades, ruta, min_distancia):\n",
    "    ruta_mas_corta= ruta[0]\n",
    "    distancia_mas_corta = min_distancia.item(0)\n",
    "    for ciudad_inicial in range(0, ciudades):\n",
    "        if min_distancia[ciudad_inicial] < distancia_mas_corta:\n",
    "            distancia_mas_corta = min_distancia.item(ciudad_inicial)\n",
    "            ruta_mas_corta = ruta[ciudad_inicial]\n",
    "\n",
    "    print(\"La distancia mínima es de: \" + str(distancia_mas_corta))\n",
    "    print(\"La ruta más corta es: \")\n",
    "    print(ruta_mas_corta)\n",
    "\n",
    "    return distancia_mas_corta, ruta_mas_corta\n",
    "def algorithm(n):\n",
    "    ciudades = n #len(matriz_distancias) #número de ciudades que queremos en la ruta\n",
    "    m = matriz_distancias #renonmbramos para facilitar el algoritmo\n",
    "\n",
    "    min_distancia = np.zeros((ciudades,), dtype=float)  # distancia mínima del nodo inicial\n",
    "    ruta = [[0 for i in range(0, ciudades)] for k in range(0, ciudades)]\n",
    "\n",
    "    # primero seleccionamos la ciuadad inicial\n",
    "    for ciudad_inicial in range(0, ciudades):\n",
    "        #print(\"Iteracion\")\n",
    "        #print(ruta)\n",
    "        # Repetir hasta que todas las ciudades se visiten a lo más una vez\n",
    "        sin_visitar = np.ones((ciudades,), dtype=int)  # ningún nodo se ha visitado\n",
    "        sin_visitar[ciudad_inicial] = 0\n",
    "        ruta[ciudad_inicial][0] = ciudad_inicial  # travel route starts with start_node\n",
    "\n",
    "        ciudad = ciudad_inicial\n",
    "        it = 1\n",
    "        while ciudades_sin_visitar(sin_visitar) and it < ciudades:\n",
    "            # Buscamos todos los caminos (arcos) que salen del la primera ciudad que se visita y van a un nodo no visitado y se elige el más corto\n",
    "            cercano_cam = float('inf')\n",
    "            cercano_ciud = ciudades\n",
    "\n",
    "            for ciudad2 in range(0, ciudades):\n",
    "                if sin_visitar[ciudad2] == 1 and 0 < m[ciudad][ciudad2] < cercano_cam:\n",
    "                    cercano_cam =  m[ciudad][ciudad2]\n",
    "                    cercano_ciud = ciudad2\n",
    "\n",
    "            if  cercano_ciud >= ciudades:\n",
    "                min_distancia[ciudad_inicial] = float('inf')\n",
    "                break\n",
    "\n",
    "            ciudad =  cercano_ciud\n",
    "            sin_visitar[ciudad] = 0\n",
    "            min_distancia[ciudad_inicial] = min_distancia[ciudad_inicial] + cercano_cam\n",
    "            ruta[ciudad_inicial][it] = ciudad\n",
    "            it = it + 1\n",
    "\n",
    "        if not math.isinf(min_distancia[ciudad_inicial]):\n",
    "            ultima_vis = ruta[ciudad_inicial][ciudades-1]\n",
    "            if m[ultima_vis][ciudad_inicial] > 0:\n",
    "                min_distancia[ciudad_inicial] = min_distancia[ciudad_inicial] + m[ultima_vis ][ciudad_inicial]\n",
    "            else:\n",
    "                min_distancia[ciudad_inicial] = float('inf')\n",
    "\n",
    "\n",
    "    [distancia_mas_corta, ruta_mas_corta] = mejor_ruta(ciudades, ruta, min_distancia)\n",
    "\n",
    "    return distancia_mas_corta, ruta_mas_corta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Codigos para medir la complejidad (tiempo)\n",
    "def mejor_ruta_no_output(ciudades, ruta, min_distancia):\n",
    "    #set_trace()\n",
    "    ruta_mas_corta= ruta[0]\n",
    "    distancia_mas_corta = min_distancia.item(0)\n",
    "    for ciudad_inicial in range(0, ciudades):\n",
    "        if min_distancia[ciudad_inicial] < distancia_mas_corta:\n",
    "            distancia_mas_corta = min_distancia.item(ciudad_inicial)\n",
    "            ruta_mas_corta = ruta[ciudad_inicial]\n",
    "    return distancia_mas_corta, ruta_mas_corta\n",
    "\n",
    "def algorithm_no_output(n):\n",
    "    ciudades = n #len(matriz_distancias) #número de ciudades que queremos en la ruta\n",
    "    m = matriz_distancias #renonmbramos para facilitar el algoritmo\n",
    "\n",
    "    min_distancia = np.zeros((ciudades,), dtype=float)  # distancia mínima del nodo inicial\n",
    "    ruta = [[0 for i in range(0, ciudades)] for k in range(0, ciudades)]\n",
    "\n",
    "    # primero seleccionamos la ciuadad inicial\n",
    "    for ciudad_inicial in range(0, ciudades):\n",
    "        # Repetir hasta que todas las ciudades se visiten a lo más una vez\n",
    "        sin_visitar = np.ones((ciudades,), dtype=int)  # ningún nodo se ha visitado\n",
    "        sin_visitar[ciudad_inicial] = 0\n",
    "        ruta[ciudad_inicial][0] = ciudad_inicial  # travel route starts with start_node\n",
    "\n",
    "        ciudad = ciudad_inicial\n",
    "        it = 1\n",
    "        set_trace()\n",
    "        #print(\"ciudad inicial: \", ciudad_inicial)\n",
    "        while ciudades_sin_visitar(sin_visitar) and it < ciudades:\n",
    "            # Buscamos todos los caminos (arcos) que salen del la primera ciudad que se visita y van a un nodo no visitado y se elige el más corto\n",
    "            cercano_cam = float('inf')\n",
    "            cercano_ciud = ciudades\n",
    "\n",
    "            for ciudad2 in range(0, ciudades):\n",
    "                if sin_visitar[ciudad2] == 1 and 0 < m[ciudad][ciudad2] < cercano_cam:\n",
    "                    cercano_cam =  m[ciudad][ciudad2]\n",
    "                    cercano_ciud = ciudad2\n",
    "\n",
    "            if  cercano_ciud >= ciudades:\n",
    "                min_distancia[ciudad_inicial] = float('inf')\n",
    "                break\n",
    "            #print(\"Ciudad: \", ciudad)\n",
    "            #print(\"cercano_ciud: \", cercano_ciud)\n",
    "            #print(\"cercano_cam\", cercano_cam)\n",
    "            ciudad =  cercano_ciud\n",
    "            sin_visitar[ciudad] = 0\n",
    "            min_distancia[ciudad_inicial] = min_distancia[ciudad_inicial] + cercano_cam\n",
    "            ruta[ciudad_inicial][it] = ciudad\n",
    "            it = it + 1\n",
    "            #print(\"min_distancia\", min_distancia[ciudad_inicial])\n",
    "            #print(\"-----------\")\n",
    "            \n",
    "        if not math.isinf(min_distancia[ciudad_inicial]):\n",
    "            #print(\"visitado\")\n",
    "            ultima_vis = ruta[ciudad_inicial][ciudades-1]\n",
    "            if m[ultima_vis][ciudad_inicial] > 0:\n",
    "                min_distancia[ciudad_inicial] = min_distancia[ciudad_inicial] + m[ultima_vis][ciudad_inicial]\n",
    "            else:\n",
    "                min_distancia[ciudad_inicial] = float('inf')\n",
    "            #print(\"ultima visita\", ultima_vis)\n",
    "            #print(\"min_distancia: \",min_distancia[ciudad_inicial])\n",
    "\n",
    "    [distancia_mas_corta, ruta_mas_corta] = mejor_ruta_no_output(ciudades, ruta, min_distancia)\n",
    "\n",
    "    return distancia_mas_corta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> \u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m(29)\u001b[0;36malgorithm_no_output\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m     27 \u001b[0;31m        \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     28 \u001b[0;31m        \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m---> 29 \u001b[0;31m        \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     30 \u001b[0;31m        \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     31 \u001b[0;31m            \u001b[0;31m# Buscamos todos los caminos (arcos) que salen del la primera ciudad que se visita y van a un nodo no visitado y se elige el más corto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "ipdb> c\n",
      "ciudad inicial:  1\n",
      "Ciudad:  1\n",
      "cercano_ciud:  5\n",
      "cercano_cam 20\n",
      "min_distancia 20.0\n",
      "-----------\n",
      "Ciudad:  5\n",
      "cercano_ciud:  6\n",
      "cercano_cam 142\n",
      "min_distancia 162.0\n",
      "-----------\n",
      "Ciudad:  6\n",
      "cercano_ciud:  2\n",
      "cercano_cam 136\n",
      "min_distancia 298.0\n",
      "-----------\n",
      "Ciudad:  2\n",
      "cercano_ciud:  7\n",
      "cercano_cam 116\n",
      "min_distancia 414.0\n",
      "-----------\n",
      "Ciudad:  7\n",
      "cercano_ciud:  9\n",
      "cercano_cam 48\n",
      "min_distancia 462.0\n",
      "-----------\n",
      "Ciudad:  9\n",
      "cercano_ciud:  8\n",
      "cercano_cam 165\n",
      "min_distancia 627.0\n",
      "-----------\n",
      "Ciudad:  8\n",
      "cercano_ciud:  12\n",
      "cercano_cam 97\n",
      "min_distancia 724.0\n",
      "-----------\n",
      "Ciudad:  12\n",
      "cercano_ciud:  13\n",
      "cercano_cam 90\n",
      "min_distancia 814.0\n",
      "-----------\n",
      "Ciudad:  13\n",
      "cercano_ciud:  19\n",
      "cercano_cam 112\n",
      "min_distancia 926.0\n",
      "-----------\n",
      "Ciudad:  19\n",
      "cercano_ciud:  0\n",
      "cercano_cam 82\n",
      "min_distancia 1008.0\n",
      "-----------\n",
      "Ciudad:  0\n",
      "cercano_ciud:  21\n",
      "cercano_cam 324\n",
      "min_distancia 1332.0\n",
      "-----------\n",
      "Ciudad:  21\n",
      "cercano_ciud:  20\n",
      "cercano_cam 30\n",
      "min_distancia 1362.0\n",
      "-----------\n",
      "Ciudad:  20\n",
      "cercano_ciud:  3\n",
      "cercano_cam 64\n",
      "min_distancia 1426.0\n",
      "-----------\n",
      "Ciudad:  3\n",
      "cercano_ciud:  18\n",
      "cercano_cam 66\n",
      "min_distancia 1492.0\n",
      "-----------\n",
      "Ciudad:  18\n",
      "cercano_ciud:  17\n",
      "cercano_cam 96\n",
      "min_distancia 1588.0\n",
      "-----------\n",
      "Ciudad:  17\n",
      "cercano_ciud:  15\n",
      "cercano_cam 164\n",
      "min_distancia 1752.0\n",
      "-----------\n",
      "Ciudad:  15\n",
      "cercano_ciud:  14\n",
      "cercano_cam 70\n",
      "min_distancia 1822.0\n",
      "-----------\n",
      "Ciudad:  14\n",
      "cercano_ciud:  11\n",
      "cercano_cam 41\n",
      "min_distancia 1863.0\n",
      "-----------\n",
      "Ciudad:  11\n",
      "cercano_ciud:  10\n",
      "cercano_cam 90\n",
      "min_distancia 1953.0\n",
      "-----------\n",
      "Ciudad:  10\n",
      "cercano_ciud:  16\n",
      "cercano_cam 136\n",
      "min_distancia 2089.0\n",
      "-----------\n",
      "Ciudad:  16\n",
      "cercano_ciud:  4\n",
      "cercano_cam 405\n",
      "min_distancia 2494.0\n",
      "-----------\n",
      "visitado\n",
      "ultima visita 4\n",
      "min_distancia:  3081.0\n",
      "> \u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m(28)\u001b[0;36malgorithm_no_output\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m     26 \u001b[0;31m        \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     27 \u001b[0;31m        \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m---> 28 \u001b[0;31m        \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     29 \u001b[0;31m        \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     30 \u001b[0;31m        \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "ipdb> q\n"
     ]
    },
    {
     "ename": "BdbQuit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mBdbQuit\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-17-a1d6b92295a5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0malgorithm_no_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m22\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m in \u001b[0;36malgorithm_no_output\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m in \u001b[0;36malgorithm_no_output\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mtrace_dispatch\u001b[0;34m(self, frame, event, arg)\u001b[0m\n\u001b[1;32m     86\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;31m# None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'line'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'call'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mdispatch_line\u001b[0;34m(self, frame)\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbreak_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquitting\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mraise\u001b[0m \u001b[0mBdbQuit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrace_dispatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mBdbQuit\u001b[0m: "
     ]
    }
   ],
   "source": [
    "caminoI = [1,5,6,2,7,9,8,12,13,19,0]\n",
    "loI = [1,5,6,2,7,9,8,12,13,19,0]\n",
    "laI = [1,5,6,2,7,9,8,12,13,19,0]\n",
    "for i in range(0, len(caminoI)):\n",
    "    loI[i] = lo[caminoI[i]]\n",
    "    laI[i] = la[caminoI[i]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> \u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m(29)\u001b[0;36malgorithm_no_output\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m     27 \u001b[0;31m        \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     28 \u001b[0;31m        \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m---> 29 \u001b[0;31m        \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     30 \u001b[0;31m        \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     31 \u001b[0;31m            \u001b[0;31m# Buscamos todos los caminos (arcos) que salen del la primera ciudad que se visita y van a un nodo no visitado y se elige el más corto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "ipdb> c\n",
      "ciudad inicial:  1\n",
      "Ciudad:  1\n",
      "cercano_ciud:  5\n",
      "cercano_cam 20\n",
      "min_distancia 20.0\n",
      "-----------\n",
      "Ciudad:  5\n",
      "cercano_ciud:  6\n",
      "cercano_cam 142\n",
      "min_distancia 162.0\n",
      "-----------\n",
      "Ciudad:  6\n",
      "cercano_ciud:  2\n",
      "cercano_cam 136\n",
      "min_distancia 298.0\n",
      "-----------\n",
      "Ciudad:  2\n",
      "cercano_ciud:  7\n",
      "cercano_cam 116\n",
      "min_distancia 414.0\n",
      "-----------\n",
      "Ciudad:  7\n",
      "cercano_ciud:  9\n",
      "cercano_cam 48\n",
      "min_distancia 462.0\n",
      "-----------\n",
      "Ciudad:  9\n",
      "cercano_ciud:  8\n",
      "cercano_cam 165\n",
      "min_distancia 627.0\n",
      "-----------\n",
      "Ciudad:  8\n",
      "cercano_ciud:  12\n",
      "cercano_cam 97\n",
      "min_distancia 724.0\n",
      "-----------\n",
      "Ciudad:  12\n",
      "cercano_ciud:  13\n",
      "cercano_cam 90\n",
      "min_distancia 814.0\n",
      "-----------\n",
      "Ciudad:  13\n",
      "cercano_ciud:  19\n",
      "cercano_cam 112\n",
      "min_distancia 926.0\n",
      "-----------\n",
      "Ciudad:  19\n",
      "cercano_ciud:  0\n",
      "cercano_cam 82\n",
      "min_distancia 1008.0\n",
      "-----------\n",
      "Ciudad:  0\n",
      "cercano_ciud:  22\n",
      "cercano_cam 68\n",
      "min_distancia 1076.0\n",
      "-----------\n",
      "Ciudad:  22\n",
      "cercano_ciud:  4\n",
      "cercano_cam 335\n",
      "min_distancia 1411.0\n",
      "-----------\n",
      "Ciudad:  4\n",
      "cercano_ciud:  11\n",
      "cercano_cam 187\n",
      "min_distancia 1598.0\n",
      "-----------\n",
      "Ciudad:  11\n",
      "cercano_ciud:  14\n",
      "cercano_cam 41\n",
      "min_distancia 1639.0\n",
      "-----------\n",
      "Ciudad:  14\n",
      "cercano_ciud:  15\n",
      "cercano_cam 70\n",
      "min_distancia 1709.0\n",
      "-----------\n",
      "Ciudad:  15\n",
      "cercano_ciud:  10\n",
      "cercano_cam 102\n",
      "min_distancia 1811.0\n",
      "-----------\n",
      "Ciudad:  10\n",
      "cercano_ciud:  16\n",
      "cercano_cam 136\n",
      "min_distancia 1947.0\n",
      "-----------\n",
      "Ciudad:  16\n",
      "cercano_ciud:  17\n",
      "cercano_cam 241\n",
      "min_distancia 2188.0\n",
      "-----------\n",
      "Ciudad:  17\n",
      "cercano_ciud:  18\n",
      "cercano_cam 96\n",
      "min_distancia 2284.0\n",
      "-----------\n",
      "Ciudad:  18\n",
      "cercano_ciud:  3\n",
      "cercano_cam 66\n",
      "min_distancia 2350.0\n",
      "-----------\n",
      "Ciudad:  3\n",
      "cercano_ciud:  20\n",
      "cercano_cam 64\n",
      "min_distancia 2414.0\n",
      "-----------\n",
      "Ciudad:  20\n",
      "cercano_ciud:  21\n",
      "cercano_cam 30\n",
      "min_distancia 2444.0\n",
      "-----------\n",
      "visitado\n",
      "ultima visita 21\n",
      "min_distancia:  2590.0\n",
      "> \u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m(28)\u001b[0;36malgorithm_no_output\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m     26 \u001b[0;31m        \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     27 \u001b[0;31m        \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m---> 28 \u001b[0;31m        \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     29 \u001b[0;31m        \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m     30 \u001b[0;31m        \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "ipdb> q\n"
     ]
    },
    {
     "ename": "BdbQuit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mBdbQuit\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-18-fcdd39e7c7db>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0malgorithm_no_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m23\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m in \u001b[0;36malgorithm_no_output\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-16-6013bd6f48de>\u001b[0m in \u001b[0;36malgorithm_no_output\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mciudad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m         \u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ciudad inicial: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudad_inicial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mciudades_sin_visitar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msin_visitar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mtrace_dispatch\u001b[0;34m(self, frame, event, arg)\u001b[0m\n\u001b[1;32m     86\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;31m# None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'line'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'call'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mdispatch_line\u001b[0;34m(self, frame)\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbreak_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquitting\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mraise\u001b[0m \u001b[0mBdbQuit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrace_dispatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mBdbQuit\u001b[0m: "
     ]
    }
   ],
   "source": [
    "caminoI = [1,5,6,2,7,9,8,12,13,19,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10)) #Grafiquemos las ciudades de Luxemburgo\n",
    "plt.plot(laI, loI, '.g-')\n",
    "plt.scatter(la[0],lo[0],color='blue')\n",
    "plt.scatter(la[1:22],lo[1:22],color='black')\n",
    "plt.scatter(la[22],lo[22],color='red')\n",
    "plt.scatter(la[21], lo[21], color='green')\n",
    "plt.scatter(la[4], lo[4], color='yellow')\n",
    "plt.scatter(la[1], lo[1], color='purple')\n",
    "plt.axis('equal')\n",
    "plt.xlabel(\"Longitud\")\n",
    "plt.ylabel(\"Latitud\")\n",
    "plt.title(\"Ruta con las primeras 22 ciudades\")  \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "caminoI = [1,5,6,2,7,9,8,12,13,19,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "loI = [1,5,6,2,7,9,8,12,13,19,0]\n",
    "laI = [1,5,6,2,7,9,8,12,13,19,0]\n",
    "for i in range(0, len(caminoI)):\n",
    "    loI[i] = lo[caminoI[i]]\n",
    "    laI[i] = la[caminoI[i]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[6345.0,\n",
       " 6353.3333,\n",
       " 6490.0,\n",
       " 6405.8333,\n",
       " 6316.6667,\n",
       " 6352.7778,\n",
       " 6233.3333,\n",
       " 6136.3889]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "laI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "[1, 5, 6, 2, 7, 9, 8, 12, 13, 19, 0, 22, 4, 11, 14, 15, 10, 16, 17, 18, 3, 20, 21] #23 2590 \n",
    "[1, 5, 6, 2, 7, 9, 8, 12, 13, 19, 0, 21, 20, 3, 18, 17, 15, 14, 11, 10, 16, 4] #22 3081 \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00016101200162665918, 0.0004218360008962918, 0.0015070359986566473, 0.0016061749993241392, 0.0027341949971741997, 0.008039628999540582, 0.010234086999844294, 0.01590299899908132, 0.01637784400008968, 0.024850931997207226]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[inf, 914.0, 1073.0, 1160.0, 1556.0, 1590.0, 1710.0, 1730.0, 1777.0, 1828.0]"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tiempo = []\n",
    "distancia = []\n",
    "num = 1\n",
    "for i in range(0,10):\n",
    "    inicio = timer()\n",
    "    dist = algorithm_no_output(num)\n",
    "    final = timer()\n",
    "    tiempo.append(final - inicio)\n",
    "    distancia.append(dist)\n",
    "    num = num + 1 \n",
    "print(tiempo)\n",
    "distancia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2590.0"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distancia[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-117-f7abd2a5cf28>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0minicio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtimer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mdist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malgorithm_no_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mfinal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtimer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mtiempo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfinal\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0minicio\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-59-3c385fef5eb5>\u001b[0m in \u001b[0;36malgorithm_no_output\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mciudad2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mciudades\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m                 \u001b[0;32mif\u001b[0m \u001b[0msin_visitar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mciudad2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mciudad\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mciudad2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mcercano_cam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m                     \u001b[0mcercano_cam\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mm\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mciudad\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mciudad2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m                     \u001b[0mcercano_ciud\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mciudad2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2953\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2954\u001b[0m             \u001b[0;31m# shortcut if the key is in columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2955\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_unique\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2956\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2957\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36m__contains__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    367\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    368\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 369\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_range\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    370\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    371\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mAppender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_index_shared_docs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"get_loc\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for i in range(0,10):\n",
    "    inicio = timer()\n",
    "    dist = algorithm_no_output(num)\n",
    "    final = timer()\n",
    "    tiempo.append(final - inicio)\n",
    "    distancia.append(dist)\n",
    "    num = num + 10 \n",
    "print(tiempo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savetxt(\"tiempo.txt\", tiempo)\n",
    "np.savetxt(\"distancia.txt\", distancia)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(range(10,280, 10), (distancia), color = \"black\")\n",
    "plt.xlabel(\"Número de ciudades\")\n",
    "plt.ylabel(\"Distancia de la ruta óptima\")\n",
    "plt.title(\"Distancia\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(range(10,280, 10), (tiempo), color = \"black\")\n",
    "plt.xlabel(\"Número de ciudades\")\n",
    "plt.ylabel(\"Tiempo de la ruta óptima\")\n",
    "plt.title(\"Tiempo\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "algorithm_no_output(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1828.0,\n",
       " 2056.0,\n",
       " 2061.0,\n",
       " 2071.0,\n",
       " 2159.0,\n",
       " 2167.0,\n",
       " 2202.0,\n",
       " 2471.0,\n",
       " 2529.0,\n",
       " 2550.0]"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distancia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(6, 8)"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
